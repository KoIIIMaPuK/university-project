#pragma once

// #########################################################
// 
//                  Include My libs
// 
// #########################################################
#include "_config.hpp"

namespace ninotchka
{
    namespace logger 
    {
        // ---------------------------------------------------------
        //
        // @brief:          class ULogManager
        //
        // --------------------------- 
        // @description:    класс для работы с логгами.
        // 
        // [ 1 ] field:     std::fstream objectFileULogManager;     -   для хранения файла логгирования
        // [ 2 ] field:     std::string nameLog;                    -   для хранения названия лога
        // ---------------------------------------------------------
        class ULogManager {
        private:
            std::fstream objectFileULogManager;
            std::string nameLog;

        public:
            /** ****************************************************
                *
                * @brief:			дефолтный конструктор класса
                *
                * ***************************
                * @description:	    базовый конструктор класса.
                */
            ULogManager();

            /** ****************************************************
               *
               * @brief:			конструктор класса
               *
               * ***************************
               * @description:	    перегразка конструктора класса.
               *                   есть возможность дать имя логу.
               *
               * [ 1 ] @param:   std::string name  -   имя лога
               */
            ULogManager(std::string name);

            /** ****************************************************
                *
                * @brief:			функция
                *
                * ***************************
                * @description:	    функция нужна для получения текущего времени.
                *
                * @return:          возвращает текущее время
                *                   в читабельном формате:
                *
                *                       oss.str();
                */
            std::string getCurrentTimeString(const char* format = "%F %T");

            /** ****************************************************
                *
                * @brief:			функция
                *
                * ***************************
                * @description:	    функция нужна для добавления лога.
                */
            void addLogMessage(std::string nameLog, std::string logMessage);


            /** ****************************************************
                *
                * @brief:			функция
                *
                * ***************************
                * @description:	    функция нужна для добавления лога из консоли.
                */
            void addLogMessageFromConsole();

            /** ****************************************************
                *
                * @brief:			деструктор
                *
                * ***************************
                * @description:	    деструктор класса - на всякий случай закрывает рабочий файл.
                */
            ~ULogManager();
        };
    }
}
