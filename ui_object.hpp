#pragma once

// #########################################################
// 
//                  Include My libs
// 
// #########################################################
#include "cfg_config.hpp"
#include "utl_logger.hpp"


// ---------------------------------------------------------
//
// @brief:          class UIButton
//
// --------------------------- 
// @description:    класс для работы с кнопками.
// 
// [ 1 ] field:     sf::RectangleShape shape    -   для хранения формы кнопки
// [ 2 ] field:     sf::Vector2f position;      -   для хранения позиции кнопки
// [ 3 ] field:     sf::Vector2f size;          -   для хранения размеров кнопки
// [ 4 ] field:     sf::Color color;            -   для хранения цвета кнопки в формате RGB
// ---------------------------------------------------------
class UIButton
{
protected:
    sf::RectangleShape shape;   // для хранения формы кнопки
    sf::Vector2f position;      // для хранения позиции кнопки
    sf::Vector2f size;          // для хранения размеров кнопки
    sf::Color color;            // для хранения цвета кнопки в формате RGB
    sf::Text label;             // для текста на кнопке
    sf::Font font;              // для шрифта

    ULogMaganer objectULogManager;  // для ведения логов.

public:
    /** ****************************************************
    *
    * @brief:			дефолтный конструктор класса
    *
    * ***************************
    * @description:	    инициализирует размер, позицию и цвет
    */
    UIButton();

    /** ****************************************************
    *
    * @brief:			конструктор класса
    *
    * ***************************
    * @description:	    добавлена перегрузка размера и позиции.
    */
    UIButton(sf::Vector2f size, sf::Vector2f position);

    /** ****************************************************
    *
    * @brief:			конструктор класса
    *
    * ***************************
    * @description:	    добавлена перегрузка размера, позиции и цвета.
    */
    UIButton(sf::Vector2f size, sf::Vector2f position, sf::Color color);


    /** ****************************************************
    *
    * @brief:			функция
    *
    * ***************************
    * @description:	    отрисовывает кнопку на экране
    */
    void draw(sf::RenderWindow& window);

    /** ****************************************************
    * 
    * @brief:           функция
    * 
    * ***************************
    * @description:     проверяет, находится ли
    *                   курсор мыши над кнопкой
    */
    bool isMouseOver(sf::RenderWindow& window);


    /** ****************************************************
    *
    * @brief:           функция
    *
    * ***************************
    * @description:     проверяет, была ли нажата
    *                   клавиша, когда курсор
    *                   был над кнопкой
    */
    bool isLClicked(sf::RenderWindow& window, sf::Event& event);

    /** ****************************************************
    *
    * @brief:           функция
    *
    * ***************************
    * @description:     проверяет, была ли нажата
    *                   клавиша, когда курсор
    *                   был над кнопкой
    */
    bool isRClicked(sf::RenderWindow& window, sf::Event& event);

    /** ****************************************************
    *
    * @brief:           функция - сеттер
    *
    * ***************************
    * @description:     инициализирует размер
    */
    void setSize(sf::Vector2f& size);

    /** ****************************************************
    *
    * @brief:           функция - сеттер
    *
    * ***************************
    * @description:     инициализирует позицию
    */
    void setPosition(sf::Vector2f& position);
}; 